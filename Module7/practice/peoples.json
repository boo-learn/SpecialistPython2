# "Друзья друзей"
# У всех людей, по крайне мере я надеюсь, есть друзья. У ваших друзей тоже есть друзья и так далее.
# Вы решили запустить свой бизнес и пригласить максимальное количество людей на его открытие.
# Вам в руки попала, как нельзя кстати, база людей со списком их друзей.
# Считаем, что комбинация Имя+Фамилия нам позволяет однозначно идентифицировать человека.

# Задача
# По предоставленным данным(файл peoples.json) определите:
# 1. Сколько людей придет на открытие, если вы отправляете приглашение конкретному человеку
# (любому, на ваш выбор, из базы), а тот всем друзьям, друзья друзьям и т.д.

# 2. Какому минимальному числу людей, нужно отправить приглашение,
# чтобы пришли ВСЕ люди, присутствующие в базе?

def dfs(start_point, graph):
    visited = [False] * (len(graph))
    def _dfs(v):
        visited[v] = True
        for w in graph[v]:
            if not visited[w]:  # посещён ли текущий сосед?
                _dfs(w)
    _dfs(start_point)
    return visited

def bfs(start_point,graph):
    lengths = [None] * (len(graph))
    lengths[start_point] = 0
    queue = [start_point]
    while queue:
        cur_vertex = queue.pop(0)
        for vertex in graph[cur_vertex]:
            if lengths[vertex] is None:
                lengths[vertex] = lengths[cur_vertex] + 1
                queue.append(vertex)
    return lengths

def to_graph_orient(mans,friends):
    graph = []
    for j in mans:
        graph.append([])

    for i in friends:
        for j in i:
           graph[friends.index(i)].append(mans.index(j))
    return graph


def to_graph(mans, friends):
  graph = []
  for j in mans:
    graph.append([])

  for i in friends:
    for j in i:
      graph[friends.index(i)].append(mans.index(j))
      graph[mans.index(j)].append(friends.index(i))
  return graph

def count (visitors):
  i=-1
  for _ in visitors:
    if _:
      i+=1
  return i

def not_come(visitors):
  absent = []
  i=0
  for _ in visitors:
    if _ == False:
      absent.append(i)
    i+=1
  return absent



friends=[
  {
    "name": "Вячеслав",
    "surname": "Сидоров",
    "friends": [
      {
        "name": "Дмитрий",
        "surname": "Гаврилов"
      },
      {
        "name": "Владислав",
        "surname": "Иванов"
      },
      {
        "name": "Иван",
        "surname": "Быстров"
      },
      {
        "name": "Андрей",
        "surname": "Хмельнов"
      },
      {
        "name": "Владислав",
        "surname": "Барин"
      },
      {
        "name": "Андрей",
        "surname": "Быстров"
      },
      {
        "name": "Вячеслав",
        "surname": "Васин"
      }
    ]
  },
  {
    "name": "Вячеслав",
    "surname": "Иванов",
    "friends": [
      {
        "name": "Дмитрий",
        "surname": "Гаврилов"
      },
      {
        "name": "Андрей",
        "surname": "Васин"
      },
      {
        "name": "Иван",
        "surname": "Быстров"
      },
      {
        "name": "Андрей",
        "surname": "Хмельнов"
      },
      {
        "name": "Петр",
        "surname": "Иванов"
      }
    ]
  },
  {
    "name": "Дмитрий",
    "surname": "Гаврилов",
    "friends": [
      {
        "name": "Андрей",
        "surname": "Быстров"
      },
      {
        "name": "Дмитрий",
        "surname": "Быстров"
      },
      {
        "name": "Андрей",
        "surname": "Васин"
      },
      {
        "name": "Владислав",
        "surname": "Иванов"
      },
      {
        "name": "Алексей",
        "surname": "Иванов"
      },
      {
        "name": "Вячеслав",
        "surname": "Барин"
      }
    ]
  },
  {
    "name": "Андрей",
    "surname": "Васин",
    "friends": [
      {
        "name": "Андрей",
        "surname": "Хмельнов"
      },
      {
        "name": "Петр",
        "surname": "Иванов"
      },
      {
        "name": "Алексей",
        "surname": "Сидоров"
      },
      {
        "name": "Вячеслав",
        "surname": "Васин"
      },
      {
        "name": "Алексей",
        "surname": "Иванов"
      }
    ]
  },
  {
    "name": "Владислав",
    "surname": "Иванов",
    "friends": [
      {
        "name": "Вячеслав",
        "surname": "Иванов"
      },
      {
        "name": "Андрей",
        "surname": "Хмельнов"
      },
      {
        "name": "Владислав",
        "surname": "Барин"
      },
      {
        "name": "Петр",
        "surname": "Иванов"
      },
      {
        "name": "Алексей",
        "surname": "Сидоров"
      },
      {
        "name": "Дмитрий",
        "surname": "Быстров"
      },
      {
        "name": "Вячеслав",
        "surname": "Барин"
      },
      {
        "name": "Вячеслав",
        "surname": "Куролесов"
      },
      {
        "name": "Иван",
        "surname": "Хмельнов"
      }
    ]
  },
  {
    "name": "Иван",
    "surname": "Гриб",
    "friends": [
      {
        "name": "Андрей",
        "surname": "Хмельнов"
      },
      {
        "name": "Андрей",
        "surname": "Быстров"
      },
      {
        "name": "Вячеслав",
        "surname": "Куролесов"
      },
      {
        "name": "Иван",
        "surname": "Хмельнов"
      }
    ]
  }
]

mans=[]
mans_friends=[]
for i in friends:
    mans.append({"name":i.get('name'),'surname':i.get('surname')})
    mans_friends.append(i.get('friends'))
print (mans)
for i in mans_friends:
    for j in i:
        if j not in mans:
            mans.append(j)

print (mans)
graph=to_graph_orient(mans,mans_friends)
#print(graph)
graph1=to_graph(mans,mans_friends)
#print(graph1)
for i in mans:
  start=mans.index(i)
  #print (f' выбран для приглашения {tuple(mans[start].values())[0]} {tuple(mans[start].values())[1]}')
  visitors=dfs(start,graph)
  print (f' выбран для приглашения {tuple(mans[start].values())[0]} {tuple(mans[start].values())[1]} приведет {count(visitors)} человек')
  print(f"не пришло {len(not_come(visitors))} человек конкретно:{not_come(visitors)} ")
  #print(visitors)
